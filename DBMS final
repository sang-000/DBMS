Q14: Write a SELECT query to list all employees with their emp_id, emp_name, and  emp_salary.

SQL> select emp_name,emp_id,emp_salary from Employee_98;        

EMP_NAME		      EMP_ID EMP_SALARY
------------------------- ---------- ----------
Sanju				   2	  50000
Amal				   3	  65000
Kiran				   4	  65000
Ann				   5	  60000

Q15: Retrieve the emp_name, emp_salary, and emp_join_date for employees whose    salary is greater than 50000. 

SQL> select emp_name,emp_salary,emp_join_date from Employee_98 where emp_salary>50000;

EMP_NAME		  EMP_SALARY EMP_JOIN_
------------------------- ---------- ---------
Amal			       65000 03-OCT-21
Kiran			       65000 07-DEC-22
Ann			       60000 10-APR-22

Q16: List employees in the employee table ordered by emp_salary in descending order.

SQL> select * from Employee_98 order by emp_salary DESC;

    EMP_ID EMP_NAME		     EMP_SALARY  EMP_JOIN_    DEPT_ID   EMP_EMAIL
---------- ---------------------     ----------  ---------    --------  ---------
	 3 Amal 			  65000  03-OCT-21	 103   amal@gmail.com
	 4 Kiran			  65000  07-DEC-22	 104   kiran@gmail.com
	 5 Ann				  60000  10-APR-22	 105   ann@gmail.com
	 2 Sanju			  50000  15-JUN-21	 102   sanju@gmail.com
	 
Q17: Retrieve all employees' names and salaries who joined after 01-01-2020. 

SQL> select emp_name,emp_salary from Employee_98 where emp_join_date >to_date('2020-01-01','YYYY-MM-DD');

EMP_NAME		  EMP_SALARY
------------------------- ----------
Sanju			       50000
Amal			       65000
Kiran			       65000
Ann			       60000

Q18: Write a query to select all employees whose name starts with "J". 

SQL> update Employee_98 set emp_name='John' where emp_id=2;

1 row updated.

SQL> select * from Employee_98;

    EMP_ID  EMP_NAME		     EMP_SALARY EMP_JOIN_    DEPT_ID EMP_EMAIL
---------- ------------------------- ---------- --------- ---------- ---------------
	 2  John 			  50000 15-JUN-21	102 john@gmail.com
	 3  Amal 			  65000 03-OCT-21	103 amal@gmail.com
	 4  Kiran			  65000 07-DEC-22	104 Kiran@gmail.com
	 5  Ann				  60000 10-APR-22	105 ann@gmail.com

SQL> select emp_name from Employee_98 where emp_name like 'J%';

EMP_NAME
-------------------------
John


Q19: Select the emp_name and emp_salary for employees whose salary is between 40000  and 60000. 

SQL> select emp_name,emp_salary from Employee_98 where emp_salary between 40000 and 60000;

EMP_NAME		  EMP_SALARY
------------------------- ----------
John			       50000
Ann			       60000

Q20: Write a query that groups employees by dept_id and shows the total salary per  department. 

SQL> select dept_id,sum(emp_salary) AS total_salary FROM Employee_98 GROUP BY dept_id; 

   DEPT_ID    TOTAL_SALARY
---------- ------------
       105	  60000
       104	  65000
       103	  65000
       102	  50000

Q21: Retrieve the department-wise average salary, but only for those departments with an  average salary above 60000. 

SQL> select dept_id,AVG(emp_salary) AS avg_salary FROM Employee_98 GROUP BY dept_id having AVG(emp_salary)>60000;

   DEPT_ID AVG_SALARY
---------- ----------
       104	65000
       103	65000

Q22: List the departments and the number of employees in each department who earn  above 50000. 

SQL> select dept_id,COUNT(*)AS num_employees FROM Employee_98 WHERE emp_salary > 50000 GROUP BY dept_id;

   DEPT_ID NUM_EMPLOYEES
---------- -------------
       105	       1
       104	       1
       103	       1

Q23: Use HAVING to list departments that have more than 3 employees.

SQL> select * from Employee_98;

    EMP_ID EMP_NAME		     EMP_SALARY EMP_JOIN_    DEPT_ID EMP_EMAIL
---------- ------------------------- ---------- --------- ---------- ----------------------------------------------------------------------------------------------------
	 2 John 			  50000 15-JUN-21	 102 sanju@gmail.com
	 3 Amal 			  65000 03-OCT-21	 103 amal@gmail.com
	 4 Kiran			  65000 07-DEC-22	 104 Kiran@gmail.com
	 5 Ann				  60000 10-APR-22	 101 ann@gmail.com
	 6 Smith			  60000 01-JUN-23	 101 smith@example.com
	 7 Alice			  60000 01-JUN-23	 101 alice@example.com
	 8 Rose 			  60000 01-JUN-23	 101 rose@example.com

7 rows selected.

SQL> select dept_id,COUNT(*) AS total_employees FROM Employee_98 GROUP BY dept_id HAVING COUNT(*)>3;

   DEPT_ID TOTAL_EMPLOYEES
---------- ---------------
       101		 4

Q24: Write a query to find the names of employees who have a salary greater than the average salary in their department.

SQL> SELECT emp_name FROM employee_98 WHERE emp_salary > (SELECT AVG(emp_salary)FROM employee_98 WHERE dept_id=employee_98.dept_id);

EMP_NAME
-------------------------
Amal
Kiran

Q25: Select the emp_name and emp_salary of employees who are in departments that are located in 'Ernakulam'.

SELECT emp_name,emp_salary from Employee_98 WHERE dept_id IN(SELECT dept_id FROM department_98 WHERE dept_location='Ernakulam');



SQL> UPDATE department_98 SET dept_location='Ernakulam' WHERE dept_id=103;

1 row updated.

SQL>  SELECT emp_name,emp_salary from Employee_98 WHERE dept_id IN(SELECT dept_id FROM department_98 WHERE dept_location='Ernakulam');

EMP_NAME		  EMP_SALARY
------------------------- ----------
Amal			       65000




Q26: Find the emp_name of employees who earn more than the highest salary in department 102.

UPDATE Employee_98 SET dept_id = 102 WHERE emp_id = 3;

SELECT emp_name FROM employee_98 WHERE emp_salary = (SELECT MAX(emp_salary) FROM employee_98 WHERE dept_id = 102);

SQL> SELECT emp_name FROM employee_98 WHERE emp_salary = (SELECT MAX(emp_salary) FROM employee_98 WHERE dept_id = 102);

EMP_NAME
-------------------------
Amal
Kiran


Q27: Write a query that returns the department name of the department with the highest
total salary.

SQL> SELECT dept_name FROM department_98 WHERE dept_id=(SELECT dept_id FROM (SELECT dept_id FROM employee_98 GROUP BY dept_id ORDER BY SUM(emp_salary)DESC) WHERE ROWNUM=1);

DEPT_NAME
-------------------------
MCA


Q28: Find the emp_id and emp_name of employees who are working in departments with
less than 10 employees.

SQL> SELECT emp_id,emp_name FROM Employee_98 WHERE dept_id IN(SELECT dept_id FROM Employee_98 GROUP BY dept_id HAVING COUNT(*)<10);

    EMP_ID EMP_NAME
---------- -------------------------
	 4 Kiran
	 5 Ann
	 6 Smith
	 7 Alice
	 8 Rose
	 2 John
	 3 Amal

7 rows selected.

Q29: Create a view high_salary_employees that lists the emp_name and emp_salary of
employees who earn above 70000.

SQL> create view high_salary_employees98 as select emp_name,emp_salary from employee_98; 

View created.

Q30: Write a query to view the data from the high_salary_employees view.

SQL> select * from high_salary_employees98;

EMP_NAME		  EMP_SALARY
------------------------- ----------
John			       50000
Amal			       65000
Kiran			       65000
Ann			       60000
Smith			       60000
Alice			       60000
Rose			       60000

7 rows selected.


Q31: Create a view to list employees along with the department name and their salary,filtering out employees earning below 50000.

SQL> create view emp_dept as select E.emp_name,D.dept_name,E.emp_salary from employee_98 E,department_98 D where E.emp_salary<50000 and E.dept_id=D.dept_id;

View created.


Q32: Drop the high_salary_employees view.

SQL> Drop view high_salary_employees98; 

View dropped.

Q33: Write a query to find the total salary paid in each department.
SQL> select dept_id,sum(emp_salary)as total_salary from employee_98 group by dept_id;

   DEPT_ID TOTAL_SALARY
---------- ------------
       104	  65000
       101	 225000
       102	 115000
       
Q34: Use AVG() to find the average salary of employees in the 'Marketing' department.

SQL> select avg(emp_salary) from employee_98 where dept_id=(select dept_id from department_98 where dept_name='marketing');

AVG(EMP_SALARY)
---------------
	  56250


Q35: Find the employee with the highest salary in each department using MAX().

SQL> select dept_id,max(emp_salary) as max_salary from employee_98 group by dept_id;

   DEPT_ID MAX_SALARY
---------- ----------
       103	60000
       102	65000
       
Q36: Write a query that finds the total number of employees in each department.

SQL> select dept_id,count(*) as total_employees from employee_98 group by dept_id;

   DEPT_ID TOTAL_EMPLOYEES
---------- ---------------
       103		 4
       102		 2


Q37: Calculate the sum of the salaries of all employees whose emp_salary is greater than

SQL> select sum(emp_salary) as total_salary from employee_98 where emp_salary>50000;

TOTAL_SALARY
------------
      245000
      
      
 Join Questions
 
Q38: Write an INNER JOIN query to list employee names and their corresponding department names.

SQL> select E.emp_name,D.dept_name from Employee_98 E inner join Department_98 D on E.dept_id=D.dept_id;

EMP_NAME		  DEPT_NAME
------------------------- -------------------------
Ann			  MCA
Smith			  MCA
Alice			  MCA
Rose			  MCA
John			  CE
Amal			  CE
Kiran			  marketing

7 rows selected.

Q39: Use a LEFT JOIN to list all employees and their department names, including those who do not belong to any department.

SQL> select E.emp_name,D.dept_name from Employee_98 E left join Department_98 D on E.dept_id=D.dept_id;

EMP_NAME		  DEPT_NAME
------------------------- -------------------------
Ann			  MCA
Smith			  MCA
Alice			  MCA
Rose			  MCA
John			  CE
Amal			  CE
Kiran			  marketing

Q40: Write a RIGHT JOIN to list all departments and their corresponding employees,including departments with no employees.

SQL> select E.emp_name,D.dept_name from Employee_98 E right join Department_98 D on E.dept_id=D.dept_id;

EMP_NAME		  DEPT_NAME
------------------------- -------------------------
John			  CE
Amal			  CE
Kiran			  marketing
Ann			  MCA
Smith			  MCA
Alice			  MCA
Rose			  MCA
			  New Department
			  MBA
			  marketing
			  New Department

11 rows selected.


Q41: Use an OUTER JOIN to list all employees and their department names, showing NULL if there is no corresponding department.

SQL> select E.emp_name, D.dept_name from employee_98 E LEFT OUTER JOIN department_98 D on E.dept_id = D.dept_id;

EMP_NAME		  DEPT_NAME
------------------------- -------------------------
Ann			  MCA
Smith			  MCA
Alice			  MCA
Rose			  MCA
John			  CE
Amal			  CE
Kiran			  marketing

7 rows selected.

Set Operations Questions

Q48: Use UNION to combine the lists of employees who joined before 2010 and after 2018.

SQL> SELECT emp_name, emp_join_date FROM employee_98 WHERE emp_join_date < TO_DATE('2010-01-01', 'YYYY-MM-DD') UNION SELECT emp_name, emp_join_date FROM employee_98 WHERE emp_join_date > TO_DATE('2018-12-31', 'YYYY-MM-DD');

EMP_NAME		  EMP_JOIN_
------------------------- ---------
Alice			  01-JUN-23
Amal			  03-OCT-21
Ann			  10-APR-22
John			  15-JUN-21
Kiran			  07-DEC-22
Rose			  01-JUN-23
Smith			  01-JUN-23

7 rows selected.

Q49: Use INTERSECT to find employees who get salary in the range 40k-50k.

SQL> SELECT emp_name,emp_salary FROM employee_98 WHERE emp_salary >= 40000 INTERSECT SELECT emp_name,emp_salary FROM employee_98 WHERE emp_salary <= 50000;

EMP_NAME		  EMP_SALARY
------------------------- ----------
Alice			       45000
John			       50000


Q50: Use EXCEPT to list out the departments not in Ernakulam.

SQL> SELECT dept_name FROM department_98 WHERE dept_name NOT IN (SELECT dept_name FROM department_98 WHERE dept_location = 'Ernakulam');

DEPT_NAME
-------------------------
MCA
CE
MBA
New Department
New Department































